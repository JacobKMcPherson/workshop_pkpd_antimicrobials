{
  "hash": "0ecb59139eb9f54a2ced0b05496ed9fe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"exercise\"\nformat: html\neditor: visual\nexecute:\n  shiny: true\n  shinylive: true\n---\n\n## Interactive Pharmacokinetic Simulation\n\n\n\n::: {.panel-tabset}\n\n### Simulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"PK Simulation: Oral Multiple Dosing\"),\n  sidebarLayout(\n    sidebarPanel(\n      actionButton(\"new_patient\", \"Generate Random Patient\"),\n      numericInput(\"dose\", \"Dose (mg):\", value = 500, min = 50, max = 2000, step = 50),\n      numericInput(\"tau\", \"Dosing Interval (hr):\", value = 12, min = 6, max = 48),\n      numericInput(\"n_doses\", \"Number of Doses:\", value = 10, min = 1, max = 30),\n      hr(),\n      h4(\"Patient Info:\"),\n      verbatimTextOutput(\"patient_info\")\n    ),\n    mainPanel(\n      plotOutput(\"pk_plot\"),\n      hr(),\n      h4(\"Simulation Data (first 10 rows):\"),\n      tableOutput(\"sim_data\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Generate a random patient\n  patient <- reactiveVal()\n  observeEvent(input$new_patient, {\n    patient(list(\n      weight = round(runif(1, 60, 100), 1),         # kg\n      age = sample(18:80, 1),\n      CL = round(runif(1, 4, 10), 2),               # Clearance (L/hr)\n      Vd = round(runif(1, 30, 80), 2),              # Volume of distribution (L)\n      ka = round(runif(1, 0.5, 2), 2),              # Absorption rate constant (1/hr)\n      F = round(runif(1, 0.5, 0.95), 2)             # Bioavailability (fraction)\n    ))\n  }, ignoreInit = FALSE) # generate patient at startup\n\n  output$patient_info <- renderPrint({\n    p <- patient()\n    if (!is.null(p)) {\n      cat(\n        paste0(\n          \"Weight: \", p$weight, \" kg\\n\",\n          \"Age: \", p$age, \" years\\n\",\n          \"CL: \", p$CL, \" L/hr\\n\",\n          \"Vd: \", p$Vd, \" L\\n\",\n          \"ka: \", p$ka, \" 1/hr\\n\",\n          \"F (bioavailability): \", p$F\n        )\n      )\n    }\n  })\n\n  sim_data <- reactive({\n    req(patient())\n    p <- patient()\n    dose <- input$dose\n    tau <- input$tau\n    n_doses <- input$n_doses\n    CL <- p$CL\n    Vd <- p$Vd\n    ka <- p$ka\n    F <- p$F\n    ke <- CL / Vd\n\n    # Time grid: simulate up to last dose + 2 intervals\n    tmax <- tau * (n_doses-1) + tau*2\n    time <- seq(0, tmax, by = 0.25)\n    conc <- rep(0, length(time))\n\n    # Multiple dosing solution, Bateman function with accumulation (no lag)\n    for (i in 0:(n_doses-1)) {\n      t_dose <- time - i*tau\n      idx <- which(t_dose >= 0)\n      conc[idx] <- conc[idx] + \n        (F*dose*ka)/(Vd*(ka-ke)) * (exp(-ke*t_dose[idx]) - exp(-ka*t_dose[idx]))\n    }\n\n    tibble(\n      time = time,\n      concentration = conc\n    )\n  })\n\n  output$pk_plot <- renderPlot({\n    sim <- sim_data()\n    ggplot(sim, aes(x = time, y = concentration)) +\n      geom_line(color = \"blue\", size = 1) +\n      labs(\n        x = \"Time (hr)\",\n        y = \"Concentration (mg/L)\",\n        title = \"Simulated Plasma Concentration-Time Curve\"\n      ) +\n      theme_minimal()\n  })\n\n  output$sim_data <- renderTable({\n    head(sim_data(), 10)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n:::\n\n\n\n\n\n::::: {.d-flex .justify-content-between .border-top .pt-4 .mt-4}\n<div>\n\n[← Session 1](index.qmd){.btn .btn-outline-primary}\n\n</div>\n\n<div>\n\n[Session 2 →](../session_02/index.qmd){.btn .btn-outline-primary}\n\n</div>\n:::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}