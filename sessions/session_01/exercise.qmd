---
title: "Exercise"
format: html
editor: visual
execute:
  shiny: true
  shinylive: true
---

# Interactive Pharmacokinetics Simulation

This interactive module demonstrates the pharmacokinetics of multiple dosing using essential parameters only. You can explore how key pharmacokinetic parameters directly affect drug concentration over time without the complexity of patient-specific adjustments.

## Controls

::: {.pk-controls}

### Random Patient Generator
::: {.patient-generator}
<div style="margin-bottom: 20px;">
  <button id="generate-patient-btn" onclick="generateRandomPatient()">Generate Random Patient</button>
  <div id="patient-info" style="margin-top: 15px;">
    <ul style="list-style-type: none; padding-left: 0;">
      <li><strong>Age:</strong> <u><span id="patient-age">-</span></u> years</li>
      <li><strong>Sex:</strong> <u><span id="patient-sex">-</span></u></li>
      <li><strong>Height:</strong> <u><span id="patient-height">-</span></u> cm</li>
      <li><strong>Weight:</strong> <u><span id="patient-weight">-</span></u> kg</li>
    </ul>
  </div>
</div>
:::

### Core PK Parameters
::: {.pk-properties}
::: {.control-group}
<label for="clearance-slider">Clearance (L/h):</label>
<input type="range" id="clearance-slider" min="0.5" max="10.0" value="5.0" step="0.1">
<span id="clearance-value">5.0</span> L/h
:::

::: {.control-group}
<label for="volume-slider">Volume of Distribution (L):</label>
<input type="range" id="volume-slider" min="10" max="100" value="50" step="5">
<span id="volume-value">50</span> L
:::

::: {.control-group}
<label for="bioavailability-slider">Bioavailability (F):</label>
<input type="range" id="bioavailability-slider" min="0.1" max="1.0" value="0.8" step="0.05">
<span id="bioavailability-value">0.8</span>
:::
:::

### Dosing Parameters
::: {.dosing-properties}
::: {.control-group}
<label for="dose-slider">Dose (mg):</label>
<input type="range" id="dose-slider" min="1" max="1000" value="250" step="1">
<span id="dose-value">250</span> mg
:::

::: {.control-group}
<label for="interval-slider">Dosing Interval (h):</label>
<select id="interval-slider">
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="4">4</option>
  <option value="6">6</option>
  <option value="8">8</option>
  <option value="12">12</option>
  <option value="18">18</option>
  <option value="24" selected>24</option>
  <option value="36">36</option>
  <option value="48">48</option>
</select>
<span id="interval-value">24</span> h
:::

::: {.control-group}
<label for="duration-slider">Treatment Duration (days):</label>
<input type="range" id="duration-slider" min="1" max="14" value="10" step="1">
<span id="duration-value">10</span> days
:::
:::

### Reference Lines
::: {.reference-properties}
::: {.control-group}
<label for="toxicity-slider">Toxicity Threshold (mg/L):</label>
<input type="range" id="toxicity-slider" min="0" max="100" value="20" step="1">
<span id="toxicity-value">20</span> mg/L
:::

::: {.control-group}
<label for="efficacy-slider">Efficacy Threshold (mg/L):</label>
<input type="range" id="efficacy-slider" min="0" max="100" value="5" step="0.5">
<span id="efficacy-value">5</span> mg/L
:::
:::

::: {.simulation-buttons}
<button id="simulate-btn" onclick="runSimulation()">Run Simulation</button>
<button id="reset-btn" onclick="resetSimulation()">Reset Parameters</button>
<button id="random-btn" onclick="randomizeParameters()">Random Simulation</button>
<button id="download-btn" onclick="downloadData()">Download Data</button>
:::

:::

## Plot and Subject Data

::: {.panel-tabset}

### Plot

::: {#concentration-plot style="width: 100%; height: 500px;"}
<div id="chart-fallback">
  <p>Loading interactive chart...</p>
  <canvas id="pk-chart" width="800" height="400"></canvas>
</div>
:::

### Subject Data

::: {#subject-table}
<table id="pk-table" class="table table-striped">
<thead>
<tr>
<th>Subject</th>
<th>Age</th>
<th>Sex</th>
<th>Wt (kg)</th>
<th>BSA (m²)</th>
<th>Dose (mg)</th>
<th>Interval (h)</th>
<th>Duration (days)</th>
<th>Clearance (L/h)</th>
<th>Volume (L)</th>
<th>Bioavailability</th>
<th>Half-life (h)</th>
<th>AUC<sub>0-24h</sub></th>
<th>C<sub>max</sub></th>
</tr>
</thead>
<tbody id="pk-table-body">
</tbody>
</table>
:::

:::

## Educational Content

### Key Pharmacokinetic Concepts

**Bioavailability (F)**: The fraction of an administered dose that reaches the systemic circulation unchanged. For oral tablets, this is typically less than 1.0 due to first-pass metabolism and incomplete absorption.

**Clearance (CL)**: The volume of plasma from which a drug is completely removed per unit time. It determines the maintenance dose required to achieve steady-state concentrations.

**Volume of Distribution (Vd)**: The theoretical volume that would be necessary to contain the total amount of an administered drug at the same concentration observed in plasma.

**Half-life (t½)**: The time required for the plasma concentration to decrease by 50%. It's calculated as: t½ = 0.693 × Vd/CL

**Multiple Dosing**: With repeated dosing at variable intervals (8-48 hours), steady-state is approached after approximately 5 half-lives. The degree of accumulation depends on the dosing interval relative to the half-life. Shorter intervals lead to higher steady-state concentrations but also greater accumulation.

### Blood Sampling Strategy

In this simulation, blood samples are collected every 1 hour to provide a detailed view of how pharmacokinetic data is collected in clinical practice. This sampling frequency allows us to:

- Capture both peak and trough concentrations
- Observe the full absorption and elimination phases
- Reduce the burden on patients compared to more frequent sampling
- Provide sufficient data points for pharmacokinetic analysis

### Simplified Pharmacokinetic Model

This simulation uses a simplified one-compartment model with first-order absorption that focuses on the minimum essential parameters needed to generate a multiple dosing pharmacokinetic plot:

**Essential PK Parameters:**
- **Clearance (CL)**: Direct control of drug elimination rate
- **Volume of Distribution (Vd)**: Direct control of drug distribution
- **Bioavailability (F)**: Fraction of dose reaching systemic circulation

**Dosing Parameters:**
- **Dose**: Amount of drug administered per dose
- **Dosing Interval**: Time between doses
- **Treatment Duration**: Total length of treatment

This approach eliminates complex patient-specific calculations (age, sex, renal function, protein binding) while maintaining the core functionality needed to understand multiple dosing pharmacokinetics.

<style>
.pk-controls {
  display: flex;
  flex-direction: column;
  gap: 30px;
  margin: 20px 0;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 8px;
}

.pk-controls h3 {
  margin: 0 0 15px 0;
  color: #495057;
  font-size: 1.1em;
  border-bottom: 2px solid #007bff;
  padding-bottom: 5px;
}

.patient-generator {
  background-color: #fff;
  border: 2px solid #28a745;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 25px;
}

.patient-generator button {
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.patient-generator button:hover {
  background-color: #218838;
}

#patient-info ul {
  margin-top: 15px;
}

#patient-info li {
  margin: 5px 0;
  font-size: 14px;
}

.pk-properties, .dosing-properties, .reference-properties {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
}

.control-group select {
  width: 100%;
  padding: 5px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  background-color: white;
}

.control-group {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.control-group label {
  font-weight: bold;
  color: #495057;
}

.control-group input[type="range"] {
  width: 100%;
}

.simulation-buttons {
  text-align: center;
  margin: 20px 0;
}

.simulation-buttons button {
  margin: 0 10px;
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.simulation-buttons button:hover {
  background-color: #0056b3;
}

#reset-btn {
  background-color: #6c757d;
}

#reset-btn:hover {
  background-color: #545b62;
}

#random-btn {
  background-color: #17a2b8;
}

#random-btn:hover {
  background-color: #138496;
}

.table {
  font-size: 0.9em;
}

@media (max-width: 768px) {
  .pk-properties, .dosing-properties, .reference-properties {
    grid-template-columns: 1fr;
  }
}
</style>

<script>
// Global variables
let subjects = [];
let timePoints = [];
let canvas = null;
let ctx = null;

// Patient data
let currentPatient = {
  age: 35,
  sex: 'Male',
  height: 170,
  weight: 70
};

// PK Model parameters
const baseParams = {
  clearance: 5.0,      // L/h
  volume: 50.0,        // L
  ka: 1.2,             // absorption rate constant (1/h)
  dose: 250,           // mg
  bioavailability: 0.8,
  interval: 24,        // dosing interval (h)
  numDoses: 10
};

// Initialize the simulation
function initializeSimulation() {
  // Generate time points (0 to 240 hours, every 1 hour)
  timePoints = [];
  for (let t = 0; t <= 240; t += 1) {
    timePoints.push(t);
  }
  
  // Initialize canvas
  canvas = document.getElementById('pk-chart');
  if (canvas) {
    ctx = canvas.getContext('2d');
    canvas.width = 800;
    canvas.height = 400;
  }
  
  // Run initial simulation
  runSimulation();
}

// Generate subjects with patient-specific parameters
function generateSubjects() {
  // Base PK parameters from sliders
  const baseClearance = parseFloat(document.getElementById('clearance-slider')?.value || 5.0);
  const baseVolume = parseFloat(document.getElementById('volume-slider')?.value || 50.0);
  const bioavailability = parseFloat(document.getElementById('bioavailability-slider')?.value || 0.8);
  
  // Calculate patient-specific clearance based on demographics
  // Using Cockcroft-Gault-like equation principles for clearance scaling
  const { age, sex, height, weight } = currentPatient;
  
  // Clearance adjustment factors
  let clearanceAdjustment = 1.0;
  
  // Age factor (decreases with age)
  if (age > 65) {
    clearanceAdjustment *= (1 - (age - 65) * 0.01); // 1% decrease per year over 65
  }
  
  // Sex factor (males typically have ~15% higher clearance)
  if (sex === 'Male') {
    clearanceAdjustment *= 1.15;
  }
  
  // Weight factor (normalized to 70kg)
  const weightFactor = weight / 70;
  clearanceAdjustment *= Math.pow(weightFactor, 0.75); // Allometric scaling
  
  const clearance = baseClearance * clearanceAdjustment;
  
  // Volume of distribution as ratio incorporating patient parameters
  // Using body surface area and lean body mass concepts
  const bsa = Math.sqrt((height * weight) / 3600); // Mosteller formula for BSA
  const standardBsa = 1.73; // Standard BSA in m²
  const bsaRatio = bsa / standardBsa;
  
  // Volume adjustment based on body size
  const volume = baseVolume * bsaRatio;
  
  // Dosing parameters
  const dose = parseFloat(document.getElementById('dose-slider')?.value || 250);
  const interval = parseFloat(document.getElementById('interval-slider')?.value || 24);
  const duration = parseFloat(document.getElementById('duration-slider')?.value || 10);
  
  subjects = [];
  
  // Calculate number of doses based on duration
  const numDoses = Math.ceil((duration * 24) / interval);
  
  // Calculate half-life
  const halfLife = 0.693 * volume / clearance;
  
  subjects.push({
    id: 1,
    // Patient demographics
    age: age,
    sex: sex,
    height: height,
    weight: weight,
    bsa: bsa,
    // Core PK parameters (patient-adjusted)
    dose: dose,
    clearance: clearance,
    volume: volume,
    bioavailability: bioavailability,
    // Dosing parameters
    interval: interval,
    duration: duration,
    numDoses: numDoses,
    // Calculated parameters
    halfLife: halfLife,
    concentrations: [],
    auc: 0,
    cmax: 0
  });
}

// Box-Muller transformation for normal random numbers
function randomNormal() {
  let u = 0, v = 0;
  while(u === 0) u = Math.random();
  while(v === 0) v = Math.random();
  return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
}

// Generate random patient with demographics
function generateRandomPatient() {
  // Generate random values
  const age = Math.floor(Math.random() * (90 - 18 + 1)) + 18;
  const sex = Math.random() < 0.5 ? "Male" : "Female";
  const height = Math.floor(Math.random() * (200 - 140 + 1)) + 140;
  const weight = Math.floor(Math.random() * (140 - 40 + 1)) + 40;

  // Update global patient data
  currentPatient = { age, sex, height, weight };

  // Update the UI
  document.getElementById('patient-age').innerText = age;
  document.getElementById('patient-sex').innerText = sex;
  document.getElementById('patient-height').innerText = height;
  document.getElementById('patient-weight').innerText = weight;

  // Store in localStorage
  localStorage.setItem('currentPatient', JSON.stringify(currentPatient));
  
  // Recalculate and update simulation with new patient-specific parameters
  runSimulation();
}

// One-compartment PK model with first-order absorption and multiple dosing
function calculateConcentration(subject, time) {
  const { clearance, volume, dose, bioavailability, interval, numDoses } = subject;
  const ke = clearance / volume;  // elimination rate constant
  const ka = baseParams.ka;
  const tau = interval;
  
  let concentration = 0;
  
  // Calculate contribution from each dose
  for (let n = 0; n < numDoses; n++) {
    const doseTime = n * tau;
    if (time >= doseTime) {
      const timeSinceDose = time - doseTime;
      // One-compartment model with first-order absorption
      const conc = (dose * bioavailability * ka / volume) * 
                   (Math.exp(-ke * timeSinceDose) - Math.exp(-ka * timeSinceDose)) / 
                   (ka - ke);
      concentration += conc;
    }
  }
  
  return Math.max(0, concentration);
}

// Run the simulation
function runSimulation() {
  generateSubjects();
  
  // Calculate concentrations for each subject
  subjects.forEach(subject => {
    subject.concentrations = timePoints.map(time => calculateConcentration(subject, time));
    
    // Calculate AUC for first 24 hours (steady-state)
    const startIdx = timePoints.findIndex(t => t >= 216); // Day 9 start
    const endIdx = timePoints.findIndex(t => t >= 240);   // Day 10 end
    if (startIdx !== -1 && endIdx !== -1) {
      subject.auc = trapezoidalRule(
        timePoints.slice(startIdx, endIdx), 
        subject.concentrations.slice(startIdx, endIdx)
      );
    }
    
    // Find Cmax in steady-state period
    if (startIdx !== -1 && endIdx !== -1) {
      subject.cmax = Math.max(...subject.concentrations.slice(startIdx, endIdx));
    }
  });
  
  // Update chart and table
  drawChart();
  updateTable();
}

// Trapezoidal rule for AUC calculation
function trapezoidalRule(timeArray, concArray) {
  let auc = 0;
  for (let i = 1; i < timeArray.length; i++) {
    const dt = timeArray[i] - timeArray[i-1];
    const avgConc = (concArray[i] + concArray[i-1]) / 2;
    auc += dt * avgConc;
  }
  return auc;
}

// Simple canvas-based chart drawing
function drawChart() {
  if (!ctx || !canvas) return;
  
  // Clear canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  // Chart dimensions
  const margin = { top: 40, right: 40, bottom: 60, left: 80 };
  const width = canvas.width - margin.left - margin.right;
  const height = canvas.height - margin.top - margin.bottom;
  
  // Find scales
  const maxTime = Math.max(...timePoints);
  const rawMaxConc = Math.max(...subjects.flatMap(s => s.concentrations));
  // Fixed y-axis range: always 0 to 100 mg/L
  const maxConc = 100;
  
  // Draw background
  ctx.fillStyle = '#f8f9fa';
  ctx.fillRect(margin.left, margin.top, width, height);
  
  // Draw grid lines
  ctx.strokeStyle = '#e9ecef';
  ctx.lineWidth = 1;
  for (let i = 0; i <= 10; i++) {
    const x = margin.left + (i / 10) * width;
    const y = margin.top + (i / 10) * height;
    
    // Vertical lines
    ctx.beginPath();
    ctx.moveTo(x, margin.top);
    ctx.lineTo(x, margin.top + height);
    ctx.stroke();
    
    // Horizontal lines
    ctx.beginPath();
    ctx.moveTo(margin.left, y);
    ctx.lineTo(margin.left + width, y);
    ctx.stroke();
  }
  
  // Draw axes
  ctx.strokeStyle = '#000';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(margin.left, margin.top);
  ctx.lineTo(margin.left, margin.top + height);
  ctx.lineTo(margin.left + width, margin.top + height);
  ctx.stroke();
  
  // Draw reference lines (toxicity and efficacy thresholds)
  const toxicityThreshold = parseFloat(document.getElementById('toxicity-slider')?.value || 20);
  const efficacyThreshold = parseFloat(document.getElementById('efficacy-slider')?.value || 5);
  
  if (toxicityThreshold > 0 && toxicityThreshold <= maxConc) {
    const toxicityY = margin.top + height - (toxicityThreshold / maxConc) * height;
    ctx.strokeStyle = '#dc3545'; // Red for toxicity
    ctx.lineWidth = 2;
    ctx.setLineDash([5, 5]); // Dashed line
    ctx.beginPath();
    ctx.moveTo(margin.left, toxicityY);
    ctx.lineTo(margin.left + width, toxicityY);
    ctx.stroke();
    
    // Label for toxicity line
    ctx.fillStyle = '#dc3545';
    ctx.font = '12px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(`Toxicity (${toxicityThreshold} mg/L)`, margin.left + 10, toxicityY - 5);
  }
  
  if (efficacyThreshold > 0 && efficacyThreshold <= maxConc) {
    const efficacyY = margin.top + height - (efficacyThreshold / maxConc) * height;
    ctx.strokeStyle = '#28a745'; // Green for efficacy
    ctx.lineWidth = 2;
    ctx.setLineDash([5, 5]); // Dashed line
    ctx.beginPath();
    ctx.moveTo(margin.left, efficacyY);
    ctx.lineTo(margin.left + width, efficacyY);
    ctx.stroke();
    
    // Label for efficacy line
    ctx.fillStyle = '#28a745';
    ctx.font = '12px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(`Efficacy (${efficacyThreshold} mg/L)`, margin.left + 10, efficacyY - 5);
  }
  
  // Reset line dash for other drawings
  ctx.setLineDash([]);
  
  // Draw concentration profile for single subject
  const singleSubjectColor = '#007bff'; // Blue color for single subject
  
  subjects.forEach((subject, subjectIndex) => {
    ctx.strokeStyle = singleSubjectColor;
    ctx.lineWidth = 3; // Thicker line for better visibility
    ctx.beginPath();
    
    let firstPoint = true;
    for (let i = 0; i < timePoints.length; i++) {
      const x = margin.left + (timePoints[i] / maxTime) * width;
      const y = margin.top + height - (subject.concentrations[i] / maxConc) * height;
      
      if (firstPoint) {
        ctx.moveTo(x, y);
        firstPoint = false;
      } else {
        ctx.lineTo(x, y);
      }
    }
    ctx.stroke();
    
    // Draw data points to show 1-hour sampling
    ctx.fillStyle = singleSubjectColor;
    for (let i = 0; i < timePoints.length; i++) {
      const x = margin.left + (timePoints[i] / maxTime) * width;
      const y = margin.top + height - (subject.concentrations[i] / maxConc) * height;
      
      ctx.beginPath();
      ctx.arc(x, y, 4, 0, 2 * Math.PI);
      ctx.fill();
    }
  });
  
  // Add labels
  ctx.fillStyle = '#000';
  ctx.font = '14px Arial';
  
  // X-axis label
  ctx.textAlign = 'center';
  ctx.fillText('Time (hours)', margin.left + width/2, canvas.height - 10);
  
  // Y-axis label
  ctx.save();
  ctx.translate(20, margin.top + height/2);
  ctx.rotate(-Math.PI/2);
  ctx.textAlign = 'center';
  ctx.fillText('Concentration (mg/L)', 0, 0);
  ctx.restore();
  
  // Title
  ctx.textAlign = 'center';
  ctx.font = 'bold 16px Arial';
  ctx.fillText('Plasma Concentration-Time Profile (Blood Samples Every 4 Hours)', canvas.width/2, 25);
  
  // Add axis ticks and values
  ctx.font = '12px Arial';
  ctx.textAlign = 'center';
  
  // X-axis ticks
  for (let i = 0; i <= 10; i++) {
    const x = margin.left + (i / 10) * width;
    const timeValue = (i / 10) * maxTime;
    ctx.fillText(Math.round(timeValue), x, margin.top + height + 20);
  }
  
  // Y-axis ticks
  ctx.textAlign = 'right';
  for (let i = 0; i <= 5; i++) {
    const y = margin.top + height - (i / 5) * height;
    const concValue = (i / 5) * maxConc;
    ctx.fillText(concValue.toFixed(1), margin.left - 10, y + 4);
  }
}

// Update the subjects table
function updateTable() {
  const tbody = document.getElementById('pk-table-body');
  if (!tbody) return;
  
  tbody.innerHTML = '';
  
  subjects.forEach(subject => {
    const row = tbody.insertRow();
    row.innerHTML = `
      <td>${subject.id}</td>
      <td>${subject.age}</td>
      <td>${subject.sex}</td>
      <td>${subject.weight}</td>
      <td>${subject.bsa ? subject.bsa.toFixed(2) : 'N/A'}</td>
      <td>${subject.dose}</td>
      <td>${subject.interval}</td>
      <td>${subject.duration}</td>
      <td>${subject.clearance.toFixed(2)}</td>
      <td>${subject.volume.toFixed(1)}</td>
      <td>${subject.bioavailability.toFixed(2)}</td>
      <td>${subject.halfLife.toFixed(1)}</td>
      <td>${subject.auc.toFixed(1)}</td>
      <td>${subject.cmax.toFixed(2)}</td>
    `;
  });
}

// Download data functionality
function downloadData() {
  // Prepare the data for download
  const data = {
    timestamp: new Date().toISOString(),
    parameters: {
      clearance: parseFloat(document.getElementById('clearance-slider')?.value || 5.0),
      volume: parseFloat(document.getElementById('volume-slider')?.value || 50.0),
      bioavailability: parseFloat(document.getElementById('bioavailability-slider')?.value || 0.8),
      dose: parseFloat(document.getElementById('dose-slider')?.value || 250),
      interval: parseFloat(document.getElementById('interval-slider')?.value || 24),
      duration: parseFloat(document.getElementById('duration-slider')?.value || 10),
      toxicityThreshold: parseFloat(document.getElementById('toxicity-slider')?.value || 20),
      efficacyThreshold: parseFloat(document.getElementById('efficacy-slider')?.value || 5)
    },
    timePoints: timePoints,
    subjects: subjects.map(subject => ({
      id: subject.id,
      concentrations: subject.concentrations,
      halfLife: subject.halfLife,
      auc: subject.auc,
      cmax: subject.cmax
    }))
  };
  
  // Create downloadable file
  const dataStr = JSON.stringify(data, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  // Create download link
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `pk_simulation_data_${new Date().toISOString().split('T')[0]}.json`;
  
  // Trigger download
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Also download plot as image
  downloadPlotImage();
}

// Download plot as image
function downloadPlotImage() {
  if (!canvas) return;
  
  // Create download link for canvas image
  const link = document.createElement('a');
  link.href = canvas.toDataURL('image/png');
  link.download = `pk_simulation_plot_${new Date().toISOString().split('T')[0]}.png`;
  
  // Trigger download
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// Reset parameters to defaults
function resetSimulation() {
  const sliderDefaults = {
    // Core PK parameters
    'clearance-slider': 5.0,
    'volume-slider': 50,
    'bioavailability-slider': 0.8,
    // Dosing parameters
    'dose-slider': 250,
    'interval-slider': 24,
    'duration-slider': 10,
    // Reference lines
    'toxicity-slider': 20,
    'efficacy-slider': 5
  };
  
  Object.entries(sliderDefaults).forEach(([id, value]) => {
    const element = document.getElementById(id);
    if (element) {
      element.value = value;
    }
  });
  
  updateSliderValues();
  runSimulation();
}

// Randomize parameters for interesting simulations
function randomizeParameters() {
  // Define parameter ranges for randomization
  const randomParams = {
    // Core PK parameters - reasonable clinical ranges
    'clearance-slider': { min: 1.0, max: 8.0 },
    'volume-slider': { min: 20, max: 80 },
    'bioavailability-slider': { min: 0.4, max: 1.0 },
    // Dosing parameters
    'dose-slider': { min: 100, max: 400 },
    'interval-slider': { min: 8, max: 36 },
    'duration-slider': { min: 3, max: 14 }
  };
  
  // Randomize core PK and dosing parameters
  Object.entries(randomParams).forEach(([id, range]) => {
    const element = document.getElementById(id);
    if (element) {
      const randomValue = Math.random() * (range.max - range.min) + range.min;
      // Round to appropriate precision based on parameter type
      let finalValue;
      if (id === 'clearance-slider' || id === 'bioavailability-slider') {
        finalValue = Math.round(randomValue * 10) / 10; // 1 decimal place
      } else {
        finalValue = Math.round(randomValue); // integers
      }
      element.value = finalValue;
    }
  });
  
  // Generate reference lines ensuring toxicity > efficacy
  const efficacyMin = 2;
  const efficacyMax = 50;  // Increased to allow higher efficacy thresholds
  const efficacyThreshold = Math.round((Math.random() * (efficacyMax - efficacyMin) + efficacyMin) * 2) / 2; // Round to 0.5
  
  // Toxicity should be at least 5 mg/L higher than efficacy, up to 100 mg/L
  const toxicityMin = efficacyThreshold + 5;
  const toxicityMax = 100;  // Increased to match new maximum
  const toxicityThreshold = Math.round(Math.random() * (toxicityMax - toxicityMin) + toxicityMin);
  
  const efficacyElement = document.getElementById('efficacy-slider');
  const toxicityElement = document.getElementById('toxicity-slider');
  
  if (efficacyElement) efficacyElement.value = efficacyThreshold;
  if (toxicityElement) toxicityElement.value = toxicityThreshold;
  
  updateSliderValues();
  runSimulation();
}

// Update slider value displays
function updateSliderValues() {
  const updates = [
    // Core PK parameters
    { slider: 'clearance-slider', display: 'clearance-value' },
    { slider: 'volume-slider', display: 'volume-value' },
    { slider: 'bioavailability-slider', display: 'bioavailability-value' },
    // Dosing parameters
    { slider: 'dose-slider', display: 'dose-value' },
    { slider: 'duration-slider', display: 'duration-value' },
    // Reference lines
    { slider: 'toxicity-slider', display: 'toxicity-value' },
    { slider: 'efficacy-slider', display: 'efficacy-value' }
  ];
  
  updates.forEach(update => {
    const slider = document.getElementById(update.slider);
    const display = document.getElementById(update.display);
    if (slider && display) {
      display.textContent = slider.value;
    }
  });
  
  // Handle interval dropdown separately
  const intervalSelect = document.getElementById('interval-slider');
  const intervalDisplay = document.getElementById('interval-value');
  if (intervalSelect && intervalDisplay) {
    intervalDisplay.textContent = intervalSelect.value;
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  // Initialize patient data from localStorage or defaults
  const savedPatient = localStorage.getItem('currentPatient');
  if (savedPatient) {
    currentPatient = JSON.parse(savedPatient);
  }
  
  // Update patient display
  document.getElementById('patient-age').innerText = currentPatient.age;
  document.getElementById('patient-sex').innerText = currentPatient.sex;
  document.getElementById('patient-height').innerText = currentPatient.height;
  document.getElementById('patient-weight').innerText = currentPatient.weight;
  
  // Add event listeners to sliders
  const sliderIds = [
    // Core PK parameters
    'clearance-slider', 'volume-slider', 'bioavailability-slider',
    // Dosing parameters
    'dose-slider', 'duration-slider',
    // Reference lines
    'toxicity-slider', 'efficacy-slider'
  ];
  
  sliderIds.forEach(id => {
    const slider = document.getElementById(id);
    if (slider) {
      slider.addEventListener('input', function() {
        updateSliderValues();
        // Redraw chart when reference line sliders change
        if (id === 'toxicity-slider' || id === 'efficacy-slider') {
          drawChart();
        } else {
          // Recalculate simulation for PK parameter changes
          runSimulation();
        }
      });
    }
  });
  
  // Handle interval dropdown separately (it already has onchange attribute)
  const intervalSelect = document.getElementById('interval-slider');
  if (intervalSelect) {
    intervalSelect.addEventListener('change', function() {
      updateSliderValues();
      runSimulation();
    });
  }
  
  // Initialize the simulation
  updateSliderValues();
  setTimeout(initializeSimulation, 100);  // Small delay to ensure DOM is ready
});
</script>

::::: {.d-flex .justify-content-between .border-top .pt-4 .mt-4}
<div>

[← Session 1](index.qmd){.btn .btn-outline-primary}

</div>

<div>

[Session 2 →](../session_02/index.qmd){.btn .btn-outline-primary}

</div>
:::::
