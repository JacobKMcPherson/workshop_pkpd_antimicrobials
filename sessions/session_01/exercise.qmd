---
title: "Exercise"
format: html
editor: visual
execute:
  shiny: true
  shinylive: true
---

# Interactive Pharmacokinetics Simulation

This interactive module demonstrates the pharmacokinetics of one subject administered ten daily doses of an orally bioavailable tablet with blood samples taken every four hours. You can explore how different pharmacokinetic parameters affect drug concentration over time.

## Simulation Parameters

::: {.panel-tabset}

### Controls

::: {.pk-controls}

### Patient-Specific Parameters
::: {.patient-properties}
::: {.control-group}
<label for="age-slider">Age (years):</label>
<input type="range" id="age-slider" min="18" max="90" value="35" step="1">
<span id="age-value">35</span> years
:::

::: {.control-group}
<label for="sex-select">Sex:</label>
<select id="sex-select">
  <option value="male">Male</option>
  <option value="female">Female</option>
</select>
:::

::: {.control-group}
<label for="height-slider">Height (cm):</label>
<input type="range" id="height-slider" min="140" max="200" value="170" step="5">
<span id="height-value">170</span> cm
:::

::: {.control-group}
<label for="weight-slider">Weight (kg):</label>
<input type="range" id="weight-slider" min="40" max="150" value="70" step="5">
<span id="weight-value">70</span> kg
:::

::: {.control-group}
<label for="creatinine-slider">Serum Creatinine (mg/dL):</label>
<input type="range" id="creatinine-slider" min="0.5" max="3.0" value="1.0" step="0.1">
<span id="creatinine-value">1.0</span> mg/dL
:::

::: {.control-group}
<label for="albumin-slider">Serum Albumin (g/dL):</label>
<input type="range" id="albumin-slider" min="2.0" max="5.0" value="4.0" step="0.1">
<span id="albumin-value">4.0</span> g/dL
:::
:::

### Drug-Specific Parameters
::: {.drug-properties}
::: {.control-group}
<label for="fa-slider">Fraction Absorbed (fa):</label>
<input type="range" id="fa-slider" min="0.1" max="1.0" value="0.9" step="0.05">
<span id="fa-value">0.9</span>
:::

::: {.control-group}
<label for="vd-slider">Volume of Distribution (L/kg):</label>
<input type="range" id="vd-slider" min="0.1" max="10" value="0.7" step="0.1">
<span id="vd-value">0.7</span> L/kg
:::
:::

### Dosing-Specific Parameters
::: {.dosing-properties}
::: {.control-group}
<label for="dose-slider">Dose (mg):</label>
<input type="range" id="dose-slider" min="50" max="500" value="250" step="25">
<span id="dose-value">250</span> mg
:::

::: {.control-group}
<label for="interval-slider">Dosing Interval (h):</label>
<input type="range" id="interval-slider" min="8" max="48" value="24" step="4">
<span id="interval-value">24</span> h
:::

::: {.control-group}
<label for="duration-slider">Treatment Duration (days):</label>
<input type="range" id="duration-slider" min="1" max="14" value="10" step="1">
<span id="duration-value">10</span> days
:::
:::

:::

::: {.simulation-buttons}
<button id="simulate-btn" onclick="runSimulation()">Run Simulation</button>
<button id="reset-btn" onclick="resetSimulation()">Reset Parameters</button>
:::

### Plot

::: {#concentration-plot style="width: 100%; height: 500px;"}
<div id="chart-fallback">
  <p>Loading interactive chart...</p>
  <canvas id="pk-chart" width="800" height="400"></canvas>
</div>
:::

### Subject Data

::: {#subject-table}
#### Subject Parameters

<table id="pk-table" class="table table-striped">
<thead>
<tr>
<th>Subject</th>
<th>Age</th>
<th>Sex</th>
<th>Weight (kg)</th>
<th>Creatinine (mg/dL)</th>
<th>Albumin (g/dL)</th>
<th>CrCl (mL/min)</th>
<th>Clearance (L/h)</th>
<th>Volume (L)</th>
<th>Half-life (h)</th>
<th>AUC<sub>0-24h</sub></th>
<th>C<sub>max</sub></th>
</tr>
</thead>
<tbody id="pk-table-body">
</tbody>
</table>
:::

:::

## Educational Content

### Key Pharmacokinetic Concepts

**Bioavailability (F)**: The fraction of an administered dose that reaches the systemic circulation unchanged. For oral tablets, this is typically less than 1.0 due to first-pass metabolism and incomplete absorption.

**Clearance (CL)**: The volume of plasma from which a drug is completely removed per unit time. It determines the maintenance dose required to achieve steady-state concentrations.

**Volume of Distribution (Vd)**: The theoretical volume that would be necessary to contain the total amount of an administered drug at the same concentration observed in plasma.

**Half-life (t½)**: The time required for the plasma concentration to decrease by 50%. It's calculated as: t½ = 0.693 × Vd/CL

**Multiple Dosing**: With repeated dosing at variable intervals (8-48 hours), steady-state is approached after approximately 5 half-lives. The degree of accumulation depends on the dosing interval relative to the half-life. Shorter intervals lead to higher steady-state concentrations but also greater accumulation.

### Blood Sampling Strategy

In this simulation, blood samples are collected every 4 hours to provide a more realistic view of how pharmacokinetic data is collected in clinical practice. This sampling frequency allows us to:

- Capture both peak and trough concentrations
- Observe the full absorption and elimination phases
- Reduce the burden on patients compared to more frequent sampling
- Provide sufficient data points for pharmacokinetic analysis

### Single Subject Analysis

This focused approach to studying one subject allows for:
- Clear visualization of concentration-time relationships
- Better understanding of fundamental PK principles
- Simplified interpretation without inter-subject variability
- Focus on the impact of dose and bioavailability changes

<style>
.pk-controls {
  display: flex;
  flex-direction: column;
  gap: 30px;
  margin: 20px 0;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 8px;
}

.pk-controls h3 {
  margin: 0 0 15px 0;
  color: #495057;
  font-size: 1.1em;
  border-bottom: 2px solid #007bff;
  padding-bottom: 5px;
}

.patient-properties, .drug-properties, .dosing-properties {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
}

.control-group select {
  width: 100%;
  padding: 5px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  background-color: white;
}

.control-group {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.control-group label {
  font-weight: bold;
  color: #495057;
}

.control-group input[type="range"] {
  width: 100%;
}

.simulation-buttons {
  text-align: center;
  margin: 20px 0;
}

.simulation-buttons button {
  margin: 0 10px;
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.simulation-buttons button:hover {
  background-color: #0056b3;
}

#reset-btn {
  background-color: #6c757d;
}

#reset-btn:hover {
  background-color: #545b62;
}

.table {
  font-size: 0.9em;
}

@media (max-width: 768px) {
  .patient-properties, .drug-properties, .dosing-properties {
    grid-template-columns: 1fr;
  }
}
</style>

<script>
// Global variables
let subjects = [];
let timePoints = [];
let canvas = null;
let ctx = null;

// PK Model parameters
const baseParams = {
  clearance: 5.0,      // L/h
  volume: 50.0,        // L
  ka: 1.2,             // absorption rate constant (1/h)
  dose: 250,           // mg
  bioavailability: 0.8,
  interval: 24,        // dosing interval (h)
  numDoses: 10
};

// Initialize the simulation
function initializeSimulation() {
  // Generate time points (0 to 240 hours, every 4 hours)
  timePoints = [];
  for (let t = 0; t <= 240; t += 4) {
    timePoints.push(t);
  }
  
  // Initialize canvas
  canvas = document.getElementById('pk-chart');
  if (canvas) {
    ctx = canvas.getContext('2d');
    canvas.width = 800;
    canvas.height = 400;
  }
  
  // Run initial simulation
  runSimulation();
}

// Generate subjects with variability
function generateSubjects() {
  // Patient-specific properties
  const age = parseFloat(document.getElementById('age-slider')?.value || 35);
  const sex = document.getElementById('sex-select')?.value || 'male';
  const height = parseFloat(document.getElementById('height-slider')?.value || 170);
  const weight = parseFloat(document.getElementById('weight-slider')?.value || 70);
  const creatinine = parseFloat(document.getElementById('creatinine-slider')?.value || 1.0); // mg/dL
  const albumin = parseFloat(document.getElementById('albumin-slider')?.value || 4.0); // g/dL
  
  // Drug-specific properties
  const fa = parseFloat(document.getElementById('fa-slider')?.value || 0.9);
  const vd_per_kg = parseFloat(document.getElementById('vd-slider')?.value || 0.7);
  
  // Dosing-specific properties
  const dose = parseFloat(document.getElementById('dose-slider')?.value || 250);
  const interval = parseFloat(document.getElementById('interval-slider')?.value || 24);
  const duration = parseFloat(document.getElementById('duration-slider')?.value || 10);
  
  subjects = [];
  
  // Calculate derived parameters based on patient characteristics
  const vd_total = vd_per_kg * weight; // Total volume of distribution
  
  // Calculate creatinine clearance from serum creatinine (Cockcroft-Gault equation)
  const creatinine_cl = ((140 - age) * weight) / (72 * creatinine);
  const creatinine_cl_adjusted = sex === 'female' ? creatinine_cl * 0.85 : creatinine_cl;
  
  // Age-adjusted clearance (simplified model: 20% decrease per decade after 40)
  let age_factor = 1.0;
  if (age > 40) {
    age_factor = 1.0 - ((age - 40) / 10) * 0.2;
  }
  
  // Sex-adjusted clearance (females typically 15% lower)
  const sex_factor = sex === 'female' ? 0.85 : 1.0;
  
  // Renal function adjustment for clearance
  const renal_factor = creatinine_cl_adjusted / 120; // Normalized to normal CrCl of 120 mL/min
  
  // Protein binding adjustment (lower albumin = higher free fraction)
  const protein_factor = (4.0 / albumin); // Normalized to normal albumin of 4.0 g/dL
  const base_fu = 0.1; // Base free fraction
  const adjusted_fu = Math.min(1.0, base_fu * protein_factor);
  
  // Calculate final clearance
  const base_clearance = 5.0; // L/h baseline
  const clearance = base_clearance * age_factor * sex_factor * renal_factor * adjusted_fu;
  
  // Calculate effective bioavailability (simplified to just fa for drug-specific)
  const effective_bioavailability = fa * 0.8; // Assume 80% bioavailability factor
  
  // Calculate number of doses based on duration
  const numDoses = Math.ceil((duration * 24) / interval);
  
  const halfLife = 0.693 * vd_total / clearance;
  
  subjects.push({
    id: 1,
    // Drug properties
    dose: dose,
    fa: fa,
    vd_per_kg: vd_per_kg,
    bioavailability: effective_bioavailability,
    // Patient properties
    age: age,
    sex: sex,
    height: height,
    weight: weight,
    creatinine: creatinine,
    albumin: albumin,
    creatinine_cl: creatinine_cl_adjusted,
    // Dosing properties
    interval: interval,
    duration: duration,
    numDoses: numDoses,
    // Calculated PK parameters
    clearance: clearance,
    volume: vd_total,
    halfLife: halfLife,
    concentrations: [],
    auc: 0,
    cmax: 0
  });
}

// Box-Muller transformation for normal random numbers
function randomNormal() {
  let u = 0, v = 0;
  while(u === 0) u = Math.random();
  while(v === 0) v = Math.random();
  return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
}

// One-compartment PK model with first-order absorption and multiple dosing
function calculateConcentration(subject, time) {
  const { clearance, volume, dose, bioavailability, interval, numDoses } = subject;
  const ke = clearance / volume;  // elimination rate constant
  const ka = baseParams.ka;
  const tau = interval;
  
  let concentration = 0;
  
  // Calculate contribution from each dose
  for (let n = 0; n < numDoses; n++) {
    const doseTime = n * tau;
    if (time >= doseTime) {
      const timeSinceDose = time - doseTime;
      // One-compartment model with first-order absorption
      const conc = (dose * bioavailability * ka / volume) * 
                   (Math.exp(-ke * timeSinceDose) - Math.exp(-ka * timeSinceDose)) / 
                   (ka - ke);
      concentration += conc;
    }
  }
  
  return Math.max(0, concentration);
}

// Run the simulation
function runSimulation() {
  generateSubjects();
  
  // Calculate concentrations for each subject
  subjects.forEach(subject => {
    subject.concentrations = timePoints.map(time => calculateConcentration(subject, time));
    
    // Calculate AUC for first 24 hours (steady-state)
    const startIdx = timePoints.findIndex(t => t >= 216); // Day 9 start
    const endIdx = timePoints.findIndex(t => t >= 240);   // Day 10 end
    if (startIdx !== -1 && endIdx !== -1) {
      subject.auc = trapezoidalRule(
        timePoints.slice(startIdx, endIdx), 
        subject.concentrations.slice(startIdx, endIdx)
      );
    }
    
    // Find Cmax in steady-state period
    if (startIdx !== -1 && endIdx !== -1) {
      subject.cmax = Math.max(...subject.concentrations.slice(startIdx, endIdx));
    }
  });
  
  // Update chart and table
  drawChart();
  updateTable();
}

// Trapezoidal rule for AUC calculation
function trapezoidalRule(timeArray, concArray) {
  let auc = 0;
  for (let i = 1; i < timeArray.length; i++) {
    const dt = timeArray[i] - timeArray[i-1];
    const avgConc = (concArray[i] + concArray[i-1]) / 2;
    auc += dt * avgConc;
  }
  return auc;
}

// Simple canvas-based chart drawing
function drawChart() {
  if (!ctx || !canvas) return;
  
  // Clear canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  // Chart dimensions
  const margin = { top: 40, right: 40, bottom: 60, left: 80 };
  const width = canvas.width - margin.left - margin.right;
  const height = canvas.height - margin.top - margin.bottom;
  
  // Find scales
  const maxTime = Math.max(...timePoints);
  const maxConc = Math.max(...subjects.flatMap(s => s.concentrations));
  
  // Draw background
  ctx.fillStyle = '#f8f9fa';
  ctx.fillRect(margin.left, margin.top, width, height);
  
  // Draw grid lines
  ctx.strokeStyle = '#e9ecef';
  ctx.lineWidth = 1;
  for (let i = 0; i <= 10; i++) {
    const x = margin.left + (i / 10) * width;
    const y = margin.top + (i / 10) * height;
    
    // Vertical lines
    ctx.beginPath();
    ctx.moveTo(x, margin.top);
    ctx.lineTo(x, margin.top + height);
    ctx.stroke();
    
    // Horizontal lines
    ctx.beginPath();
    ctx.moveTo(margin.left, y);
    ctx.lineTo(margin.left + width, y);
    ctx.stroke();
  }
  
  // Draw axes
  ctx.strokeStyle = '#000';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(margin.left, margin.top);
  ctx.lineTo(margin.left, margin.top + height);
  ctx.lineTo(margin.left + width, margin.top + height);
  ctx.stroke();
  
  // Draw concentration profile for single subject
  const singleSubjectColor = '#007bff'; // Blue color for single subject
  
  subjects.forEach((subject, subjectIndex) => {
    ctx.strokeStyle = singleSubjectColor;
    ctx.lineWidth = 3; // Thicker line for better visibility
    ctx.beginPath();
    
    let firstPoint = true;
    for (let i = 0; i < timePoints.length; i++) {
      const x = margin.left + (timePoints[i] / maxTime) * width;
      const y = margin.top + height - (subject.concentrations[i] / maxConc) * height;
      
      if (firstPoint) {
        ctx.moveTo(x, y);
        firstPoint = false;
      } else {
        ctx.lineTo(x, y);
      }
    }
    ctx.stroke();
    
    // Draw data points to show 4-hour sampling
    ctx.fillStyle = singleSubjectColor;
    for (let i = 0; i < timePoints.length; i++) {
      const x = margin.left + (timePoints[i] / maxTime) * width;
      const y = margin.top + height - (subject.concentrations[i] / maxConc) * height;
      
      ctx.beginPath();
      ctx.arc(x, y, 4, 0, 2 * Math.PI);
      ctx.fill();
    }
  });
  
  // Add labels
  ctx.fillStyle = '#000';
  ctx.font = '14px Arial';
  
  // X-axis label
  ctx.textAlign = 'center';
  ctx.fillText('Time (hours)', margin.left + width/2, canvas.height - 10);
  
  // Y-axis label
  ctx.save();
  ctx.translate(20, margin.top + height/2);
  ctx.rotate(-Math.PI/2);
  ctx.textAlign = 'center';
  ctx.fillText('Concentration (mg/L)', 0, 0);
  ctx.restore();
  
  // Title
  ctx.textAlign = 'center';
  ctx.font = 'bold 16px Arial';
  ctx.fillText('Plasma Concentration-Time Profile (Blood Samples Every 4 Hours)', canvas.width/2, 25);
  
  // Add axis ticks and values
  ctx.font = '12px Arial';
  ctx.textAlign = 'center';
  
  // X-axis ticks
  for (let i = 0; i <= 10; i++) {
    const x = margin.left + (i / 10) * width;
    const timeValue = (i / 10) * maxTime;
    ctx.fillText(Math.round(timeValue), x, margin.top + height + 20);
  }
  
  // Y-axis ticks
  ctx.textAlign = 'right';
  for (let i = 0; i <= 5; i++) {
    const y = margin.top + height - (i / 5) * height;
    const concValue = (i / 5) * maxConc;
    ctx.fillText(concValue.toFixed(1), margin.left - 10, y + 4);
  }
}

// Update the subjects table
function updateTable() {
  const tbody = document.getElementById('pk-table-body');
  if (!tbody) return;
  
  tbody.innerHTML = '';
  
  subjects.forEach(subject => {
    const row = tbody.insertRow();
    row.innerHTML = `
      <td>${subject.id}</td>
      <td>${subject.age}</td>
      <td>${subject.sex.charAt(0).toUpperCase() + subject.sex.slice(1)}</td>
      <td>${subject.weight}</td>
      <td>${subject.creatinine.toFixed(1)}</td>
      <td>${subject.albumin.toFixed(1)}</td>
      <td>${subject.creatinine_cl.toFixed(0)}</td>
      <td>${subject.clearance.toFixed(2)}</td>
      <td>${subject.volume.toFixed(1)}</td>
      <td>${subject.halfLife.toFixed(1)}</td>
      <td>${subject.auc.toFixed(1)}</td>
      <td>${subject.cmax.toFixed(2)}</td>
    `;
  });
}

// Reset parameters to defaults
function resetSimulation() {
  const sliderDefaults = {
    // Patient-specific
    'age-slider': 35,
    'height-slider': 170,
    'weight-slider': 70,
    'creatinine-slider': 1.0,
    'albumin-slider': 4.0,
    // Drug-specific
    'fa-slider': 0.9,
    'vd-slider': 0.7,
    // Dosing-specific
    'dose-slider': 250,
    'interval-slider': 24,
    'duration-slider': 10
  };
  
  Object.entries(sliderDefaults).forEach(([id, value]) => {
    const element = document.getElementById(id);
    if (element) {
      element.value = value;
    }
  });
  
  // Reset select elements
  const sexSelect = document.getElementById('sex-select');
  if (sexSelect) sexSelect.value = 'male';
  
  updateSliderValues();
  runSimulation();
}

// Update slider value displays
function updateSliderValues() {
  const updates = [
    // Patient-specific
    { slider: 'age-slider', display: 'age-value' },
    { slider: 'height-slider', display: 'height-value' },
    { slider: 'weight-slider', display: 'weight-value' },
    { slider: 'creatinine-slider', display: 'creatinine-value' },
    { slider: 'albumin-slider', display: 'albumin-value' },
    // Drug-specific
    { slider: 'fa-slider', display: 'fa-value' },
    { slider: 'vd-slider', display: 'vd-value' },
    // Dosing-specific
    { slider: 'dose-slider', display: 'dose-value' },
    { slider: 'interval-slider', display: 'interval-value' },
    { slider: 'duration-slider', display: 'duration-value' }
  ];
  
  updates.forEach(update => {
    const slider = document.getElementById(update.slider);
    const display = document.getElementById(update.display);
    if (slider && display) {
      display.textContent = slider.value;
    }
  });
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  // Add event listeners to sliders
  const sliderIds = [
    // Patient-specific
    'age-slider', 'height-slider', 'weight-slider', 'creatinine-slider', 'albumin-slider',
    // Drug-specific
    'fa-slider', 'vd-slider',
    // Dosing-specific
    'dose-slider', 'interval-slider', 'duration-slider'
  ];
  
  sliderIds.forEach(id => {
    const slider = document.getElementById(id);
    if (slider) {
      slider.addEventListener('input', updateSliderValues);
    }
  });
  
  // Add event listeners to select elements
  const selectIds = ['sex-select'];
  selectIds.forEach(id => {
    const select = document.getElementById(id);
    if (select) {
      select.addEventListener('change', runSimulation);
    }
  });
  
  // Initialize the simulation
  updateSliderValues();
  setTimeout(initializeSimulation, 100);  // Small delay to ensure DOM is ready
});
</script>

::::: {.d-flex .justify-content-between .border-top .pt-4 .mt-4}
<div>

[← Session 1](index.qmd){.btn .btn-outline-primary}

</div>

<div>

[Session 2 →](../session_02/index.qmd){.btn .btn-outline-primary}

</div>
:::::
