---
title: "exercise"
format: html
editor: visual
execute:
  shiny: true
  shinylive: true
---

## Interactive Pharmacokinetic Simulation

```{r setup, include=FALSE}
library(shiny)
library(ggplot2)
library(dplyr)
```

::: {.panel-tabset}

### Simulation

```{r}
ui <- fluidPage(
  titlePanel("PK Simulation: Oral Multiple Dosing"),
  sidebarLayout(
    sidebarPanel(
      actionButton("new_patient", "Generate Random Patient"),
      numericInput("dose", "Dose (mg):", value = 500, min = 50, max = 2000, step = 50),
      numericInput("tau", "Dosing Interval (hr):", value = 12, min = 6, max = 48),
      numericInput("n_doses", "Number of Doses:", value = 10, min = 1, max = 30),
      hr(),
      h4("Patient Info:"),
      verbatimTextOutput("patient_info")
    ),
    mainPanel(
      plotOutput("pk_plot"),
      hr(),
      h4("Simulation Data (first 10 rows):"),
      tableOutput("sim_data")
    )
  )
)

server <- function(input, output, session) {
  # Generate a random patient
  patient <- reactiveVal()
  observeEvent(input$new_patient, {
    patient(list(
      weight = round(runif(1, 60, 100), 1),         # kg
      age = sample(18:80, 1),
      CL = round(runif(1, 4, 10), 2),               # Clearance (L/hr)
      Vd = round(runif(1, 30, 80), 2),              # Volume of distribution (L)
      ka = round(runif(1, 0.5, 2), 2),              # Absorption rate constant (1/hr)
      F = round(runif(1, 0.5, 0.95), 2)             # Bioavailability (fraction)
    ))
  }, ignoreInit = FALSE) # generate patient at startup

  output$patient_info <- renderPrint({
    p <- patient()
    if (!is.null(p)) {
      cat(
        paste0(
          "Weight: ", p$weight, " kg\n",
          "Age: ", p$age, " years\n",
          "CL: ", p$CL, " L/hr\n",
          "Vd: ", p$Vd, " L\n",
          "ka: ", p$ka, " 1/hr\n",
          "F (bioavailability): ", p$F
        )
      )
    }
  })

  sim_data <- reactive({
    req(patient())
    p <- patient()
    dose <- input$dose
    tau <- input$tau
    n_doses <- input$n_doses
    CL <- p$CL
    Vd <- p$Vd
    ka <- p$ka
    F <- p$F
    ke <- CL / Vd

    # Time grid: simulate up to last dose + 2 intervals
    tmax <- tau * (n_doses-1) + tau*2
    time <- seq(0, tmax, by = 0.25)
    conc <- rep(0, length(time))

    # Multiple dosing solution, Bateman function with accumulation (no lag)
    for (i in 0:(n_doses-1)) {
      t_dose <- time - i*tau
      idx <- which(t_dose >= 0)
      conc[idx] <- conc[idx] + 
        (F*dose*ka)/(Vd*(ka-ke)) * (exp(-ke*t_dose[idx]) - exp(-ka*t_dose[idx]))
    }

    tibble(
      time = time,
      concentration = conc
    )
  })

  output$pk_plot <- renderPlot({
    sim <- sim_data()
    ggplot(sim, aes(x = time, y = concentration)) +
      geom_line(color = "blue", size = 1) +
      labs(
        x = "Time (hr)",
        y = "Concentration (mg/L)",
        title = "Simulated Plasma Concentration-Time Curve"
      ) +
      theme_minimal()
  })

  output$sim_data <- renderTable({
    head(sim_data(), 10)
  })
}

shinyApp(ui, server)
```
:::





::::: {.d-flex .justify-content-between .border-top .pt-4 .mt-4}
<div>

[← Session 1](index.qmd){.btn .btn-outline-primary}

</div>

<div>

[Session 2 →](../session_02/index.qmd){.btn .btn-outline-primary}

</div>
:::::
